// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShopping.Data;

namespace OnlineShopping.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181228211749_mig28122018")]
    partial class mig28122018
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OnlineShopping.Models.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdTypeId");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<byte[]>("Image");

                    b.Property<DateTime>("RegistrationDate");

                    b.HasKey("AdvertisementId");

                    b.HasIndex("AdTypeId");

                    b.ToTable("Oglasi");
                });

            modelBuilder.Entity("OnlineShopping.Models.AdvertisementType", b =>
                {
                    b.Property<int>("AdTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName");

                    b.HasKey("AdTypeId");

                    b.ToTable("OglasiType");
                });

            modelBuilder.Entity("OnlineShopping.Models.ArticleBuyingHistory", b =>
                {
                    b.Property<int>("ArticleBuyingHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("ArtiklID");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<int>("Quantity");

                    b.Property<string>("UserID");

                    b.HasKey("ArticleBuyingHistoryID");

                    b.HasIndex("ArtiklID");

                    b.HasIndex("UserID");

                    b.ToTable("BuyingHistory");
                });

            modelBuilder.Entity("OnlineShopping.Models.Artikl", b =>
                {
                    b.Property<int>("ArtiklID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CartId");

                    b.Property<decimal>("CijenaArtikla");

                    b.Property<int?>("FavoritesId");

                    b.Property<string>("ImeArtikla");

                    b.Property<int>("KategorijaID");

                    b.Property<int>("NaStanju");

                    b.Property<byte[]>("SlikaArtikla");

                    b.Property<DateTime>("VrijemePostavlanja");

                    b.HasKey("ArtiklID");

                    b.HasIndex("CartId");

                    b.HasIndex("FavoritesId");

                    b.ToTable("Artikli");
                });

            modelBuilder.Entity("OnlineShopping.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CartName");

                    b.Property<DateTime>("CreationDate");

                    b.HasKey("CartId");

                    b.ToTable("Korpe");
                });

            modelBuilder.Entity("OnlineShopping.Models.CategoryCharachteristic", b =>
                {
                    b.Property<int>("CategoryCharachteristicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CharName");

                    b.Property<int>("KategorijaID");

                    b.Property<int>("Priority");

                    b.HasKey("CategoryCharachteristicId");

                    b.HasIndex("KategorijaID");

                    b.ToTable("CategoryCharachteristics");
                });

            modelBuilder.Entity("OnlineShopping.Models.Favorites", b =>
                {
                    b.Property<int>("FavoritesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.HasKey("FavoritesId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("OnlineShopping.Models.Kategorija", b =>
                {
                    b.Property<int>("KategorijaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImeKategorije");

                    b.HasKey("KategorijaID");

                    b.ToTable("Kategorije");
                });

            modelBuilder.Entity("OnlineShopping.Models.MessageBox", b =>
                {
                    b.Property<int>("MessageBoxID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsRead");

                    b.Property<string>("Message");

                    b.Property<string>("ReciverID");

                    b.Property<string>("SenderID");

                    b.Property<string>("Subject");

                    b.HasKey("MessageBoxID");

                    b.HasIndex("ReciverID");

                    b.HasIndex("SenderID");

                    b.ToTable("MessageBoxes");
                });

            modelBuilder.Entity("OnlineShopping.HelperUser.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName");

                    b.Property<int?>("KorpaCartId");

                    b.Property<string>("LastName");

                    b.Property<int>("Level");

                    b.Property<int?>("OmiljeniFavoritesId");

                    b.HasIndex("KorpaCartId");

                    b.HasIndex("OmiljeniFavoritesId");

                    b.ToTable("AppUser");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShopping.Models.Advertisement", b =>
                {
                    b.HasOne("OnlineShopping.Models.AdvertisementType", "AdvertisementType")
                        .WithMany()
                        .HasForeignKey("AdTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShopping.Models.ArticleBuyingHistory", b =>
                {
                    b.HasOne("OnlineShopping.Models.Artikl", "Artikl")
                        .WithMany()
                        .HasForeignKey("ArtiklID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineShopping.HelperUser.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OnlineShopping.Models.Artikl", b =>
                {
                    b.HasOne("OnlineShopping.Models.Cart")
                        .WithMany("Artikli")
                        .HasForeignKey("CartId");

                    b.HasOne("OnlineShopping.Models.Favorites")
                        .WithMany("Artikli")
                        .HasForeignKey("FavoritesId");
                });

            modelBuilder.Entity("OnlineShopping.Models.CategoryCharachteristic", b =>
                {
                    b.HasOne("OnlineShopping.Models.Kategorija")
                        .WithMany("OpisKategorije")
                        .HasForeignKey("KategorijaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OnlineShopping.Models.MessageBox", b =>
                {
                    b.HasOne("OnlineShopping.HelperUser.AppUser", "Reciver")
                        .WithMany()
                        .HasForeignKey("ReciverID");

                    b.HasOne("OnlineShopping.HelperUser.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID");
                });

            modelBuilder.Entity("OnlineShopping.HelperUser.AppUser", b =>
                {
                    b.HasOne("OnlineShopping.Models.Cart", "Korpa")
                        .WithMany()
                        .HasForeignKey("KorpaCartId");

                    b.HasOne("OnlineShopping.Models.Favorites", "Omiljeni")
                        .WithMany()
                        .HasForeignKey("OmiljeniFavoritesId");
                });
#pragma warning restore 612, 618
        }
    }
}
